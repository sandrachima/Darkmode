{"ast":null,"code":"export const useLocal = () => {\n  return {\n    get: key => {\n      if (!key) console.error('You must specify a key');else JSON.parse(localStorage.getItem(key));\n    },\n    set: (key, value) => {\n      if (!key) console.error('You must specify a key');else if (!value) console.error('You must specify a value you want to set');else localStorage.setItem(key, JSON.stringify(value));\n    },\n    clear: () => localStorage.clear(),\n    remove: key => {\n      if (!key) console.error('You must specify a key');else localStorage.removeItem(key);\n    },\n    removeItem: (key, value) => {\n      if (!key) console.error('You must specify a key');else if (!value) console.error('You must specify a value you want to remove');else {\n        const item = JSON.parse(localStorage.getItem(key));\n        if (!Array.isArray(item)) console.error('You can use local.removeItem() method only to update the values of type Array');else {\n          const newItems = item.filter(i => i !== value);\n          localStorage.setItem(key, JSON.stringify(newItems));\n        }\n      }\n    },\n    update: (key, value, newValue) => {\n      if (!key) console.error('You must specify a key');else if (!value) console.error('You must specify a value you want to remove');else if (!newValue) console.error('You must specify a new value you want to replace');else {\n        const item = JSON.parse(localStorage.getItem(key));\n        if (!Array.isArray(item)) console.error('You can use local.update() method only to update the values of type Array');else {\n          const newItems = item.map(i => i === value ? newValue : i);\n          localStorage.setItem(key, JSON.stringify(newItems));\n        }\n      }\n    }\n  };\n};","map":{"version":3,"names":["useLocal","get","key","console","error","JSON","parse","localStorage","getItem","set","value","setItem","stringify","clear","remove","removeItem","item","Array","isArray","newItems","filter","i","update","newValue","map"],"sources":["C:/Users/Sandra/darkmode/node_modules/use-local/hooks/use-local.js"],"sourcesContent":["export const useLocal = () => {\r\n  return {\r\n    get: (key) => {\r\n      if (!key) console.error('You must specify a key')\r\n      else JSON.parse(localStorage.getItem(key))\r\n    },\r\n    set: (key, value) => {\r\n      if (!key) console.error('You must specify a key')\r\n      else if (!value)\r\n        console.error('You must specify a value you want to set')\r\n      else localStorage.setItem(key, JSON.stringify(value))\r\n    },\r\n    clear: () => localStorage.clear(),\r\n    remove: (key) => {\r\n      if (!key) console.error('You must specify a key')\r\n      else localStorage.removeItem(key)\r\n    },\r\n    removeItem: (key, value) => {\r\n      if (!key) console.error('You must specify a key')\r\n      else if (!value)\r\n        console.error('You must specify a value you want to remove')\r\n      else {\r\n        const item = JSON.parse(localStorage.getItem(key))\r\n        if (!Array.isArray(item))\r\n          console.error(\r\n            'You can use local.removeItem() method only to update the values of type Array'\r\n          )\r\n        else {\r\n          const newItems = item.filter((i) => i !== value)\r\n          localStorage.setItem(key, JSON.stringify(newItems))\r\n        }\r\n      }\r\n    },\r\n    update: (key, value, newValue) => {\r\n      if (!key) console.error('You must specify a key')\r\n      else if (!value)\r\n        console.error('You must specify a value you want to remove')\r\n      else if (!newValue)\r\n        console.error(\r\n          'You must specify a new value you want to replace'\r\n        )\r\n      else {\r\n        const item = JSON.parse(localStorage.getItem(key))\r\n        if (!Array.isArray(item))\r\n          console.error(\r\n            'You can use local.update() method only to update the values of type Array'\r\n          )\r\n        else {\r\n          const newItems = item.map((i) =>\r\n            i === value ? newValue : i\r\n          )\r\n          localStorage.setItem(key, JSON.stringify(newItems))\r\n        }\r\n      }\r\n    },\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAGA,CAAA,KAAM;EAC5B,OAAO;IACLC,GAAG,EAAGC,GAAG,IAAK;MACZ,IAAI,CAACA,GAAG,EAAEC,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC,MAC5CC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACN,GAAG,CAAC,CAAC;IAC5C,CAAC;IACDO,GAAG,EAAEA,CAACP,GAAG,EAAEQ,KAAK,KAAK;MACnB,IAAI,CAACR,GAAG,EAAEC,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC,MAC5C,IAAI,CAACM,KAAK,EACbP,OAAO,CAACC,KAAK,CAAC,0CAA0C,CAAC,MACtDG,YAAY,CAACI,OAAO,CAACT,GAAG,EAAEG,IAAI,CAACO,SAAS,CAACF,KAAK,CAAC,CAAC;IACvD,CAAC;IACDG,KAAK,EAAEA,CAAA,KAAMN,YAAY,CAACM,KAAK,CAAC,CAAC;IACjCC,MAAM,EAAGZ,GAAG,IAAK;MACf,IAAI,CAACA,GAAG,EAAEC,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC,MAC5CG,YAAY,CAACQ,UAAU,CAACb,GAAG,CAAC;IACnC,CAAC;IACDa,UAAU,EAAEA,CAACb,GAAG,EAAEQ,KAAK,KAAK;MAC1B,IAAI,CAACR,GAAG,EAAEC,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC,MAC5C,IAAI,CAACM,KAAK,EACbP,OAAO,CAACC,KAAK,CAAC,6CAA6C,CAAC,MACzD;QACH,MAAMY,IAAI,GAAGX,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACN,GAAG,CAAC,CAAC;QAClD,IAAI,CAACe,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EACtBb,OAAO,CAACC,KAAK,CACX,+EACF,CAAC,MACE;UACH,MAAMe,QAAQ,GAAGH,IAAI,CAACI,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKX,KAAK,CAAC;UAChDH,YAAY,CAACI,OAAO,CAACT,GAAG,EAAEG,IAAI,CAACO,SAAS,CAACO,QAAQ,CAAC,CAAC;QACrD;MACF;IACF,CAAC;IACDG,MAAM,EAAEA,CAACpB,GAAG,EAAEQ,KAAK,EAAEa,QAAQ,KAAK;MAChC,IAAI,CAACrB,GAAG,EAAEC,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC,MAC5C,IAAI,CAACM,KAAK,EACbP,OAAO,CAACC,KAAK,CAAC,6CAA6C,CAAC,MACzD,IAAI,CAACmB,QAAQ,EAChBpB,OAAO,CAACC,KAAK,CACX,kDACF,CAAC,MACE;QACH,MAAMY,IAAI,GAAGX,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACN,GAAG,CAAC,CAAC;QAClD,IAAI,CAACe,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EACtBb,OAAO,CAACC,KAAK,CACX,2EACF,CAAC,MACE;UACH,MAAMe,QAAQ,GAAGH,IAAI,CAACQ,GAAG,CAAEH,CAAC,IAC1BA,CAAC,KAAKX,KAAK,GAAGa,QAAQ,GAAGF,CAC3B,CAAC;UACDd,YAAY,CAACI,OAAO,CAACT,GAAG,EAAEG,IAAI,CAACO,SAAS,CAACO,QAAQ,CAAC,CAAC;QACrD;MACF;IACF;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}