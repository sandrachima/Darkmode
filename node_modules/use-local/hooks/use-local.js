export const useLocal = () => {
  return {
    get: (key) => {
      if (!key) console.error('You must specify a key')
      else JSON.parse(localStorage.getItem(key))
    },
    set: (key, value) => {
      if (!key) console.error('You must specify a key')
      else if (!value)
        console.error('You must specify a value you want to set')
      else localStorage.setItem(key, JSON.stringify(value))
    },
    clear: () => localStorage.clear(),
    remove: (key) => {
      if (!key) console.error('You must specify a key')
      else localStorage.removeItem(key)
    },
    removeItem: (key, value) => {
      if (!key) console.error('You must specify a key')
      else if (!value)
        console.error('You must specify a value you want to remove')
      else {
        const item = JSON.parse(localStorage.getItem(key))
        if (!Array.isArray(item))
          console.error(
            'You can use local.removeItem() method only to update the values of type Array'
          )
        else {
          const newItems = item.filter((i) => i !== value)
          localStorage.setItem(key, JSON.stringify(newItems))
        }
      }
    },
    update: (key, value, newValue) => {
      if (!key) console.error('You must specify a key')
      else if (!value)
        console.error('You must specify a value you want to remove')
      else if (!newValue)
        console.error(
          'You must specify a new value you want to replace'
        )
      else {
        const item = JSON.parse(localStorage.getItem(key))
        if (!Array.isArray(item))
          console.error(
            'You can use local.update() method only to update the values of type Array'
          )
        else {
          const newItems = item.map((i) =>
            i === value ? newValue : i
          )
          localStorage.setItem(key, JSON.stringify(newItems))
        }
      }
    },
  }
}
